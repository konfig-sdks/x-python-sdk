# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints

    The version of the OpenAPI document: 2.62
    Created by: https://developer.twitter.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from x_python_sdk import schemas  # noqa: F401


class SearchCount(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Represent a Search Count Result.
    """


    class MetaOapg:
        required = {
            "tweet_count",
            "start",
            "end",
        }
        
        class properties:
            end = schemas.DateTimeSchema
            start = schemas.DateTimeSchema
            tweet_count = schemas.IntSchema
            __annotations__ = {
                "end": end,
                "start": start,
                "tweet_count": tweet_count,
            }
    
    tweet_count: MetaOapg.properties.tweet_count
    start: MetaOapg.properties.start
    end: MetaOapg.properties.end
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end"]) -> MetaOapg.properties.end: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start"]) -> MetaOapg.properties.start: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tweet_count"]) -> MetaOapg.properties.tweet_count: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["end", "start", "tweet_count", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end"]) -> MetaOapg.properties.end: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start"]) -> MetaOapg.properties.start: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tweet_count"]) -> MetaOapg.properties.tweet_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["end", "start", "tweet_count", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        tweet_count: typing.Union[MetaOapg.properties.tweet_count, decimal.Decimal, int, ],
        start: typing.Union[MetaOapg.properties.start, str, datetime, ],
        end: typing.Union[MetaOapg.properties.end, str, datetime, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SearchCount':
        return super().__new__(
            cls,
            *args,
            tweet_count=tweet_count,
            start=start,
            end=end,
            _configuration=_configuration,
            **kwargs,
        )
