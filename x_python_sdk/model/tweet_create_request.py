# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints

    The version of the OpenAPI document: 2.62
    Created by: https://developer.twitter.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from x_python_sdk import schemas  # noqa: F401


class TweetCreateRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            card_uri = schemas.StrSchema
            direct_message_deep_link = schemas.StrSchema
            for_super_followers_only = schemas.BoolSchema
        
            @staticmethod
            def geo() -> typing.Type['TweetCreateRequestGeo']:
                return TweetCreateRequestGeo
        
            @staticmethod
            def media() -> typing.Type['TweetCreateRequestMedia']:
                return TweetCreateRequestMedia
            nullcast = schemas.BoolSchema
        
            @staticmethod
            def poll() -> typing.Type['TweetCreateRequestPoll']:
                return TweetCreateRequestPoll
        
            @staticmethod
            def quote_tweet_id() -> typing.Type['TweetId']:
                return TweetId
        
            @staticmethod
            def reply() -> typing.Type['TweetCreateRequestReply']:
                return TweetCreateRequestReply
            
            
            class reply_settings(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "following": "FOLLOWING",
                        "mentionedUsers": "MENTIONED_USERS",
                    }
                
                @schemas.classproperty
                def FOLLOWING(cls):
                    return cls("following")
                
                @schemas.classproperty
                def MENTIONED_USERS(cls):
                    return cls("mentionedUsers")
            text = schemas.StrSchema
            __annotations__ = {
                "card_uri": card_uri,
                "direct_message_deep_link": direct_message_deep_link,
                "for_super_followers_only": for_super_followers_only,
                "geo": geo,
                "media": media,
                "nullcast": nullcast,
                "poll": poll,
                "quote_tweet_id": quote_tweet_id,
                "reply": reply,
                "reply_settings": reply_settings,
                "text": text,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["card_uri"]) -> MetaOapg.properties.card_uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["direct_message_deep_link"]) -> MetaOapg.properties.direct_message_deep_link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["for_super_followers_only"]) -> MetaOapg.properties.for_super_followers_only: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["geo"]) -> 'TweetCreateRequestGeo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["media"]) -> 'TweetCreateRequestMedia': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nullcast"]) -> MetaOapg.properties.nullcast: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["poll"]) -> 'TweetCreateRequestPoll': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quote_tweet_id"]) -> 'TweetId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reply"]) -> 'TweetCreateRequestReply': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reply_settings"]) -> MetaOapg.properties.reply_settings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["card_uri", "direct_message_deep_link", "for_super_followers_only", "geo", "media", "nullcast", "poll", "quote_tweet_id", "reply", "reply_settings", "text", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["card_uri"]) -> typing.Union[MetaOapg.properties.card_uri, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["direct_message_deep_link"]) -> typing.Union[MetaOapg.properties.direct_message_deep_link, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["for_super_followers_only"]) -> typing.Union[MetaOapg.properties.for_super_followers_only, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["geo"]) -> typing.Union['TweetCreateRequestGeo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["media"]) -> typing.Union['TweetCreateRequestMedia', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nullcast"]) -> typing.Union[MetaOapg.properties.nullcast, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["poll"]) -> typing.Union['TweetCreateRequestPoll', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quote_tweet_id"]) -> typing.Union['TweetId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reply"]) -> typing.Union['TweetCreateRequestReply', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reply_settings"]) -> typing.Union[MetaOapg.properties.reply_settings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union[MetaOapg.properties.text, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["card_uri", "direct_message_deep_link", "for_super_followers_only", "geo", "media", "nullcast", "poll", "quote_tweet_id", "reply", "reply_settings", "text", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        card_uri: typing.Union[MetaOapg.properties.card_uri, str, schemas.Unset] = schemas.unset,
        direct_message_deep_link: typing.Union[MetaOapg.properties.direct_message_deep_link, str, schemas.Unset] = schemas.unset,
        for_super_followers_only: typing.Union[MetaOapg.properties.for_super_followers_only, bool, schemas.Unset] = schemas.unset,
        geo: typing.Union['TweetCreateRequestGeo', schemas.Unset] = schemas.unset,
        media: typing.Union['TweetCreateRequestMedia', schemas.Unset] = schemas.unset,
        nullcast: typing.Union[MetaOapg.properties.nullcast, bool, schemas.Unset] = schemas.unset,
        poll: typing.Union['TweetCreateRequestPoll', schemas.Unset] = schemas.unset,
        quote_tweet_id: typing.Union['TweetId', schemas.Unset] = schemas.unset,
        reply: typing.Union['TweetCreateRequestReply', schemas.Unset] = schemas.unset,
        reply_settings: typing.Union[MetaOapg.properties.reply_settings, str, schemas.Unset] = schemas.unset,
        text: typing.Union[MetaOapg.properties.text, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TweetCreateRequest':
        return super().__new__(
            cls,
            *args,
            card_uri=card_uri,
            direct_message_deep_link=direct_message_deep_link,
            for_super_followers_only=for_super_followers_only,
            geo=geo,
            media=media,
            nullcast=nullcast,
            poll=poll,
            quote_tweet_id=quote_tweet_id,
            reply=reply,
            reply_settings=reply_settings,
            text=text,
            _configuration=_configuration,
            **kwargs,
        )

from x_python_sdk.model.tweet_create_request_geo import TweetCreateRequestGeo
from x_python_sdk.model.tweet_create_request_media import TweetCreateRequestMedia
from x_python_sdk.model.tweet_create_request_poll import TweetCreateRequestPoll
from x_python_sdk.model.tweet_create_request_reply import TweetCreateRequestReply
from x_python_sdk.model.tweet_id import TweetId
