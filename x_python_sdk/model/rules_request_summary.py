# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints

    The version of the OpenAPI document: 2.62
    Created by: https://developer.twitter.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from x_python_sdk import schemas  # noqa: F401


class RulesRequestSummary(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class one_of_0(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "valid",
                    "not_created",
                    "created",
                    "invalid",
                }
                
                class properties:
                    created = schemas.Int32Schema
                    invalid = schemas.Int32Schema
                    not_created = schemas.Int32Schema
                    valid = schemas.Int32Schema
                    __annotations__ = {
                        "created": created,
                        "invalid": invalid,
                        "not_created": not_created,
                        "valid": valid,
                    }
            
            valid: MetaOapg.properties.valid
            not_created: MetaOapg.properties.not_created
            created: MetaOapg.properties.created
            invalid: MetaOapg.properties.invalid
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["invalid"]) -> MetaOapg.properties.invalid: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["not_created"]) -> MetaOapg.properties.not_created: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["valid"]) -> MetaOapg.properties.valid: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["created", "invalid", "not_created", "valid", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["invalid"]) -> MetaOapg.properties.invalid: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["not_created"]) -> MetaOapg.properties.not_created: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["valid"]) -> MetaOapg.properties.valid: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["created", "invalid", "not_created", "valid", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                valid: typing.Union[MetaOapg.properties.valid, decimal.Decimal, int, ],
                not_created: typing.Union[MetaOapg.properties.not_created, decimal.Decimal, int, ],
                created: typing.Union[MetaOapg.properties.created, decimal.Decimal, int, ],
                invalid: typing.Union[MetaOapg.properties.invalid, decimal.Decimal, int, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'one_of_0':
                return super().__new__(
                    cls,
                    *args,
                    valid=valid,
                    not_created=not_created,
                    created=created,
                    invalid=invalid,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        
        class one_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "deleted",
                    "not_deleted",
                }
                
                class properties:
                    deleted = schemas.Int32Schema
                    not_deleted = schemas.Int32Schema
                    __annotations__ = {
                        "deleted": deleted,
                        "not_deleted": not_deleted,
                    }
            
            deleted: MetaOapg.properties.deleted
            not_deleted: MetaOapg.properties.not_deleted
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["not_deleted"]) -> MetaOapg.properties.not_deleted: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["deleted", "not_deleted", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["not_deleted"]) -> MetaOapg.properties.not_deleted: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["deleted", "not_deleted", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                deleted: typing.Union[MetaOapg.properties.deleted, decimal.Decimal, int, ],
                not_deleted: typing.Union[MetaOapg.properties.not_deleted, decimal.Decimal, int, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'one_of_1':
                return super().__new__(
                    cls,
                    *args,
                    deleted=deleted,
                    not_deleted=not_deleted,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def one_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.one_of_0,
                cls.one_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RulesRequestSummary':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )
