# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints

    The version of the OpenAPI document: 2.62
    Created by: https://developer.twitter.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from x_python_sdk import schemas  # noqa: F401


class FullTextEntities(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def annotations() -> typing.Type['FullTextEntitiesAnnotations']:
                return FullTextEntitiesAnnotations
            
            
            class cashtags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['CashtagEntity']:
                        return CashtagEntity
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CashtagEntity'], typing.List['CashtagEntity']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cashtags':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CashtagEntity':
                    return super().__getitem__(i)
            
            
            class hashtags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['HashtagEntity']:
                        return HashtagEntity
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['HashtagEntity'], typing.List['HashtagEntity']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hashtags':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'HashtagEntity':
                    return super().__getitem__(i)
            
            
            class mentions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['MentionEntity']:
                        return MentionEntity
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['MentionEntity'], typing.List['MentionEntity']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mentions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MentionEntity':
                    return super().__getitem__(i)
            
            
            class urls(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['UrlEntity']:
                        return UrlEntity
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['UrlEntity'], typing.List['UrlEntity']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'urls':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'UrlEntity':
                    return super().__getitem__(i)
            __annotations__ = {
                "annotations": annotations,
                "cashtags": cashtags,
                "hashtags": hashtags,
                "mentions": mentions,
                "urls": urls,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annotations"]) -> 'FullTextEntitiesAnnotations': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cashtags"]) -> MetaOapg.properties.cashtags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hashtags"]) -> MetaOapg.properties.hashtags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mentions"]) -> MetaOapg.properties.mentions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["urls"]) -> MetaOapg.properties.urls: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["annotations", "cashtags", "hashtags", "mentions", "urls", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annotations"]) -> typing.Union['FullTextEntitiesAnnotations', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cashtags"]) -> typing.Union[MetaOapg.properties.cashtags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hashtags"]) -> typing.Union[MetaOapg.properties.hashtags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mentions"]) -> typing.Union[MetaOapg.properties.mentions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["urls"]) -> typing.Union[MetaOapg.properties.urls, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["annotations", "cashtags", "hashtags", "mentions", "urls", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        annotations: typing.Union['FullTextEntitiesAnnotations', schemas.Unset] = schemas.unset,
        cashtags: typing.Union[MetaOapg.properties.cashtags, list, tuple, schemas.Unset] = schemas.unset,
        hashtags: typing.Union[MetaOapg.properties.hashtags, list, tuple, schemas.Unset] = schemas.unset,
        mentions: typing.Union[MetaOapg.properties.mentions, list, tuple, schemas.Unset] = schemas.unset,
        urls: typing.Union[MetaOapg.properties.urls, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FullTextEntities':
        return super().__new__(
            cls,
            *args,
            annotations=annotations,
            cashtags=cashtags,
            hashtags=hashtags,
            mentions=mentions,
            urls=urls,
            _configuration=_configuration,
            **kwargs,
        )

from x_python_sdk.model.cashtag_entity import CashtagEntity
from x_python_sdk.model.full_text_entities_annotations import FullTextEntitiesAnnotations
from x_python_sdk.model.hashtag_entity import HashtagEntity
from x_python_sdk.model.mention_entity import MentionEntity
from x_python_sdk.model.url_entity import UrlEntity
