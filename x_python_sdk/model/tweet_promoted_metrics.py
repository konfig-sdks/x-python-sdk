# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints

    The version of the OpenAPI document: 2.62
    Created by: https://developer.twitter.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from x_python_sdk import schemas  # noqa: F401


class TweetPromotedMetrics(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Promoted nonpublic engagement metrics for the Tweet at the time of the request.
    """


    class MetaOapg:
        
        class properties:
            impression_count = schemas.Int32Schema
            like_count = schemas.Int32Schema
            reply_count = schemas.Int32Schema
            retweet_count = schemas.Int32Schema
            __annotations__ = {
                "impression_count": impression_count,
                "like_count": like_count,
                "reply_count": reply_count,
                "retweet_count": retweet_count,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["impression_count"]) -> MetaOapg.properties.impression_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["like_count"]) -> MetaOapg.properties.like_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reply_count"]) -> MetaOapg.properties.reply_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["retweet_count"]) -> MetaOapg.properties.retweet_count: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["impression_count", "like_count", "reply_count", "retweet_count", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["impression_count"]) -> typing.Union[MetaOapg.properties.impression_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["like_count"]) -> typing.Union[MetaOapg.properties.like_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reply_count"]) -> typing.Union[MetaOapg.properties.reply_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["retweet_count"]) -> typing.Union[MetaOapg.properties.retweet_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["impression_count", "like_count", "reply_count", "retweet_count", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        impression_count: typing.Union[MetaOapg.properties.impression_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        like_count: typing.Union[MetaOapg.properties.like_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        reply_count: typing.Union[MetaOapg.properties.reply_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        retweet_count: typing.Union[MetaOapg.properties.retweet_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TweetPromotedMetrics':
        return super().__new__(
            cls,
            *args,
            impression_count=impression_count,
            like_count=like_count,
            reply_count=reply_count,
            retweet_count=retweet_count,
            _configuration=_configuration,
            **kwargs,
        )
