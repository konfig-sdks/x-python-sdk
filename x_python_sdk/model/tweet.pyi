# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints

    The version of the OpenAPI document: 2.62
    Created by: https://developer.twitter.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from x_python_sdk import schemas  # noqa: F401


class Tweet(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "edit_history_tweet_ids",
            "id",
            "text",
        }
        
        class properties:
            
            
            class edit_history_tweet_ids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TweetId']:
                        return TweetId
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['TweetId'], typing.List['TweetId']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'edit_history_tweet_ids':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TweetId':
                    return super().__getitem__(i)
        
            @staticmethod
            def id() -> typing.Type['TweetId']:
                return TweetId
            text = schemas.StrSchema
        
            @staticmethod
            def attachments() -> typing.Type['TweetAttachments']:
                return TweetAttachments
        
            @staticmethod
            def author_id() -> typing.Type['UserId']:
                return UserId
            
            
            class context_annotations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ContextAnnotation']:
                        return ContextAnnotation
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ContextAnnotation'], typing.List['ContextAnnotation']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'context_annotations':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ContextAnnotation':
                    return super().__getitem__(i)
        
            @staticmethod
            def conversation_id() -> typing.Type['TweetId']:
                return TweetId
            created_at = schemas.DateTimeSchema
        
            @staticmethod
            def edit_controls() -> typing.Type['TweetEditControls']:
                return TweetEditControls
        
            @staticmethod
            def entities() -> typing.Type['FullTextEntities']:
                return FullTextEntities
        
            @staticmethod
            def geo() -> typing.Type['TweetGeo']:
                return TweetGeo
        
            @staticmethod
            def in_reply_to_user_id() -> typing.Type['UserId']:
                return UserId
            lang = schemas.StrSchema
        
            @staticmethod
            def non_public_metrics() -> typing.Type['TweetNonPublicMetrics']:
                return TweetNonPublicMetrics
        
            @staticmethod
            def organic_metrics() -> typing.Type['TweetOrganicMetrics']:
                return TweetOrganicMetrics
            possibly_sensitive = schemas.BoolSchema
        
            @staticmethod
            def promoted_metrics() -> typing.Type['TweetPromotedMetrics']:
                return TweetPromotedMetrics
        
            @staticmethod
            def public_metrics() -> typing.Type['TweetPublicMetrics']:
                return TweetPublicMetrics
        
            @staticmethod
            def referenced_tweets() -> typing.Type['TweetReferencedTweets']:
                return TweetReferencedTweets
        
            @staticmethod
            def reply_settings() -> typing.Type['ReplySettings']:
                return ReplySettings
            source = schemas.StrSchema
        
            @staticmethod
            def withheld() -> typing.Type['TweetWithheld']:
                return TweetWithheld
            __annotations__ = {
                "edit_history_tweet_ids": edit_history_tweet_ids,
                "id": id,
                "text": text,
                "attachments": attachments,
                "author_id": author_id,
                "context_annotations": context_annotations,
                "conversation_id": conversation_id,
                "created_at": created_at,
                "edit_controls": edit_controls,
                "entities": entities,
                "geo": geo,
                "in_reply_to_user_id": in_reply_to_user_id,
                "lang": lang,
                "non_public_metrics": non_public_metrics,
                "organic_metrics": organic_metrics,
                "possibly_sensitive": possibly_sensitive,
                "promoted_metrics": promoted_metrics,
                "public_metrics": public_metrics,
                "referenced_tweets": referenced_tweets,
                "reply_settings": reply_settings,
                "source": source,
                "withheld": withheld,
            }
    
    edit_history_tweet_ids: MetaOapg.properties.edit_history_tweet_ids
    id: 'TweetId'
    text: MetaOapg.properties.text
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["edit_history_tweet_ids"]) -> MetaOapg.properties.edit_history_tweet_ids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'TweetId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attachments"]) -> 'TweetAttachments': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["author_id"]) -> 'UserId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["context_annotations"]) -> MetaOapg.properties.context_annotations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conversation_id"]) -> 'TweetId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["edit_controls"]) -> 'TweetEditControls': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entities"]) -> 'FullTextEntities': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["geo"]) -> 'TweetGeo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["in_reply_to_user_id"]) -> 'UserId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lang"]) -> MetaOapg.properties.lang: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["non_public_metrics"]) -> 'TweetNonPublicMetrics': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organic_metrics"]) -> 'TweetOrganicMetrics': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["possibly_sensitive"]) -> MetaOapg.properties.possibly_sensitive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["promoted_metrics"]) -> 'TweetPromotedMetrics': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["public_metrics"]) -> 'TweetPublicMetrics': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["referenced_tweets"]) -> 'TweetReferencedTweets': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reply_settings"]) -> 'ReplySettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["withheld"]) -> 'TweetWithheld': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["edit_history_tweet_ids", "id", "text", "attachments", "author_id", "context_annotations", "conversation_id", "created_at", "edit_controls", "entities", "geo", "in_reply_to_user_id", "lang", "non_public_metrics", "organic_metrics", "possibly_sensitive", "promoted_metrics", "public_metrics", "referenced_tweets", "reply_settings", "source", "withheld", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["edit_history_tweet_ids"]) -> MetaOapg.properties.edit_history_tweet_ids: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> 'TweetId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attachments"]) -> typing.Union['TweetAttachments', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["author_id"]) -> typing.Union['UserId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["context_annotations"]) -> typing.Union[MetaOapg.properties.context_annotations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conversation_id"]) -> typing.Union['TweetId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["edit_controls"]) -> typing.Union['TweetEditControls', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entities"]) -> typing.Union['FullTextEntities', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["geo"]) -> typing.Union['TweetGeo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["in_reply_to_user_id"]) -> typing.Union['UserId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lang"]) -> typing.Union[MetaOapg.properties.lang, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["non_public_metrics"]) -> typing.Union['TweetNonPublicMetrics', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organic_metrics"]) -> typing.Union['TweetOrganicMetrics', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["possibly_sensitive"]) -> typing.Union[MetaOapg.properties.possibly_sensitive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["promoted_metrics"]) -> typing.Union['TweetPromotedMetrics', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["public_metrics"]) -> typing.Union['TweetPublicMetrics', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["referenced_tweets"]) -> typing.Union['TweetReferencedTweets', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reply_settings"]) -> typing.Union['ReplySettings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union[MetaOapg.properties.source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["withheld"]) -> typing.Union['TweetWithheld', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["edit_history_tweet_ids", "id", "text", "attachments", "author_id", "context_annotations", "conversation_id", "created_at", "edit_controls", "entities", "geo", "in_reply_to_user_id", "lang", "non_public_metrics", "organic_metrics", "possibly_sensitive", "promoted_metrics", "public_metrics", "referenced_tweets", "reply_settings", "source", "withheld", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        edit_history_tweet_ids: typing.Union[MetaOapg.properties.edit_history_tweet_ids, list, tuple, ],
        id: 'TweetId',
        text: typing.Union[MetaOapg.properties.text, str, ],
        attachments: typing.Union['TweetAttachments', schemas.Unset] = schemas.unset,
        author_id: typing.Union['UserId', schemas.Unset] = schemas.unset,
        context_annotations: typing.Union[MetaOapg.properties.context_annotations, list, tuple, schemas.Unset] = schemas.unset,
        conversation_id: typing.Union['TweetId', schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
        edit_controls: typing.Union['TweetEditControls', schemas.Unset] = schemas.unset,
        entities: typing.Union['FullTextEntities', schemas.Unset] = schemas.unset,
        geo: typing.Union['TweetGeo', schemas.Unset] = schemas.unset,
        in_reply_to_user_id: typing.Union['UserId', schemas.Unset] = schemas.unset,
        lang: typing.Union[MetaOapg.properties.lang, str, schemas.Unset] = schemas.unset,
        non_public_metrics: typing.Union['TweetNonPublicMetrics', schemas.Unset] = schemas.unset,
        organic_metrics: typing.Union['TweetOrganicMetrics', schemas.Unset] = schemas.unset,
        possibly_sensitive: typing.Union[MetaOapg.properties.possibly_sensitive, bool, schemas.Unset] = schemas.unset,
        promoted_metrics: typing.Union['TweetPromotedMetrics', schemas.Unset] = schemas.unset,
        public_metrics: typing.Union['TweetPublicMetrics', schemas.Unset] = schemas.unset,
        referenced_tweets: typing.Union['TweetReferencedTweets', schemas.Unset] = schemas.unset,
        reply_settings: typing.Union['ReplySettings', schemas.Unset] = schemas.unset,
        source: typing.Union[MetaOapg.properties.source, str, schemas.Unset] = schemas.unset,
        withheld: typing.Union['TweetWithheld', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Tweet':
        return super().__new__(
            cls,
            *args,
            edit_history_tweet_ids=edit_history_tweet_ids,
            id=id,
            text=text,
            attachments=attachments,
            author_id=author_id,
            context_annotations=context_annotations,
            conversation_id=conversation_id,
            created_at=created_at,
            edit_controls=edit_controls,
            entities=entities,
            geo=geo,
            in_reply_to_user_id=in_reply_to_user_id,
            lang=lang,
            non_public_metrics=non_public_metrics,
            organic_metrics=organic_metrics,
            possibly_sensitive=possibly_sensitive,
            promoted_metrics=promoted_metrics,
            public_metrics=public_metrics,
            referenced_tweets=referenced_tweets,
            reply_settings=reply_settings,
            source=source,
            withheld=withheld,
            _configuration=_configuration,
            **kwargs,
        )

from x_python_sdk.model.context_annotation import ContextAnnotation
from x_python_sdk.model.full_text_entities import FullTextEntities
from x_python_sdk.model.reply_settings import ReplySettings
from x_python_sdk.model.tweet_attachments import TweetAttachments
from x_python_sdk.model.tweet_edit_controls import TweetEditControls
from x_python_sdk.model.tweet_geo import TweetGeo
from x_python_sdk.model.tweet_id import TweetId
from x_python_sdk.model.tweet_non_public_metrics import TweetNonPublicMetrics
from x_python_sdk.model.tweet_organic_metrics import TweetOrganicMetrics
from x_python_sdk.model.tweet_promoted_metrics import TweetPromotedMetrics
from x_python_sdk.model.tweet_public_metrics import TweetPublicMetrics
from x_python_sdk.model.tweet_referenced_tweets import TweetReferencedTweets
from x_python_sdk.model.tweet_withheld import TweetWithheld
from x_python_sdk.model.user_id import UserId
