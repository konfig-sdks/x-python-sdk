# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints

    The version of the OpenAPI document: 2.62
    Created by: https://developer.twitter.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from x_python_sdk import schemas  # noqa: F401


class User(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The Twitter User object.
    """


    class MetaOapg:
        required = {
            "name",
            "id",
            "username",
        }
        
        class properties:
        
            @staticmethod
            def id() -> typing.Type['UserId']:
                return UserId
            name = schemas.StrSchema
        
            @staticmethod
            def username() -> typing.Type['UserName']:
                return UserName
            description = schemas.StrSchema
            created_at = schemas.DateTimeSchema
        
            @staticmethod
            def entities() -> typing.Type['UserEntities']:
                return UserEntities
            location = schemas.StrSchema
        
            @staticmethod
            def pinned_tweet_id() -> typing.Type['TweetId']:
                return TweetId
            profile_image_url = schemas.StrSchema
            protected = schemas.BoolSchema
        
            @staticmethod
            def public_metrics() -> typing.Type['UserPublicMetrics']:
                return UserPublicMetrics
            url = schemas.StrSchema
            verified = schemas.BoolSchema
            verified_type = schemas.StrSchema
        
            @staticmethod
            def withheld() -> typing.Type['UserWithheld']:
                return UserWithheld
            __annotations__ = {
                "id": id,
                "name": name,
                "username": username,
                "description": description,
                "created_at": created_at,
                "entities": entities,
                "location": location,
                "pinned_tweet_id": pinned_tweet_id,
                "profile_image_url": profile_image_url,
                "protected": protected,
                "public_metrics": public_metrics,
                "url": url,
                "verified": verified,
                "verified_type": verified_type,
                "withheld": withheld,
            }
    
    name: MetaOapg.properties.name
    id: 'UserId'
    username: 'UserName'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'UserId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> 'UserName': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entities"]) -> 'UserEntities': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> MetaOapg.properties.location: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pinned_tweet_id"]) -> 'TweetId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profile_image_url"]) -> MetaOapg.properties.profile_image_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["protected"]) -> MetaOapg.properties.protected: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["public_metrics"]) -> 'UserPublicMetrics': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verified"]) -> MetaOapg.properties.verified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verified_type"]) -> MetaOapg.properties.verified_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["withheld"]) -> 'UserWithheld': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "username", "description", "created_at", "entities", "location", "pinned_tweet_id", "profile_image_url", "protected", "public_metrics", "url", "verified", "verified_type", "withheld", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> 'UserId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> 'UserName': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entities"]) -> typing.Union['UserEntities', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union[MetaOapg.properties.location, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pinned_tweet_id"]) -> typing.Union['TweetId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profile_image_url"]) -> typing.Union[MetaOapg.properties.profile_image_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["protected"]) -> typing.Union[MetaOapg.properties.protected, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["public_metrics"]) -> typing.Union['UserPublicMetrics', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verified"]) -> typing.Union[MetaOapg.properties.verified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verified_type"]) -> typing.Union[MetaOapg.properties.verified_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["withheld"]) -> typing.Union['UserWithheld', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "username", "description", "created_at", "entities", "location", "pinned_tweet_id", "profile_image_url", "protected", "public_metrics", "url", "verified", "verified_type", "withheld", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        id: 'UserId',
        username: 'UserName',
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
        entities: typing.Union['UserEntities', schemas.Unset] = schemas.unset,
        location: typing.Union[MetaOapg.properties.location, str, schemas.Unset] = schemas.unset,
        pinned_tweet_id: typing.Union['TweetId', schemas.Unset] = schemas.unset,
        profile_image_url: typing.Union[MetaOapg.properties.profile_image_url, str, schemas.Unset] = schemas.unset,
        protected: typing.Union[MetaOapg.properties.protected, bool, schemas.Unset] = schemas.unset,
        public_metrics: typing.Union['UserPublicMetrics', schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        verified: typing.Union[MetaOapg.properties.verified, bool, schemas.Unset] = schemas.unset,
        verified_type: typing.Union[MetaOapg.properties.verified_type, str, schemas.Unset] = schemas.unset,
        withheld: typing.Union['UserWithheld', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'User':
        return super().__new__(
            cls,
            *args,
            name=name,
            id=id,
            username=username,
            description=description,
            created_at=created_at,
            entities=entities,
            location=location,
            pinned_tweet_id=pinned_tweet_id,
            profile_image_url=profile_image_url,
            protected=protected,
            public_metrics=public_metrics,
            url=url,
            verified=verified,
            verified_type=verified_type,
            withheld=withheld,
            _configuration=_configuration,
            **kwargs,
        )

from x_python_sdk.model.tweet_id import TweetId
from x_python_sdk.model.user_entities import UserEntities
from x_python_sdk.model.user_id import UserId
from x_python_sdk.model.user_name import UserName
from x_python_sdk.model.user_public_metrics import UserPublicMetrics
from x_python_sdk.model.user_withheld import UserWithheld
