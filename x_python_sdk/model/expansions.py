# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints

    The version of the OpenAPI document: 2.62
    Created by: https://developer.twitter.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from x_python_sdk import schemas  # noqa: F401


class Expansions(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class media(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['Media']:
                        return Media
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Media'], typing.List['Media']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'media':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Media':
                    return super().__getitem__(i)
            
            
            class places(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['Place']:
                        return Place
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Place'], typing.List['Place']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'places':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Place':
                    return super().__getitem__(i)
            
            
            class polls(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['Poll']:
                        return Poll
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Poll'], typing.List['Poll']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'polls':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Poll':
                    return super().__getitem__(i)
            
            
            class topics(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['Topic']:
                        return Topic
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Topic'], typing.List['Topic']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'topics':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Topic':
                    return super().__getitem__(i)
            
            
            class tweets(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['Tweet']:
                        return Tweet
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Tweet'], typing.List['Tweet']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tweets':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Tweet':
                    return super().__getitem__(i)
            
            
            class users(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['User']:
                        return User
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['User'], typing.List['User']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'users':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'User':
                    return super().__getitem__(i)
            __annotations__ = {
                "media": media,
                "places": places,
                "polls": polls,
                "topics": topics,
                "tweets": tweets,
                "users": users,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["media"]) -> MetaOapg.properties.media: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["places"]) -> MetaOapg.properties.places: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["polls"]) -> MetaOapg.properties.polls: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topics"]) -> MetaOapg.properties.topics: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tweets"]) -> MetaOapg.properties.tweets: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["users"]) -> MetaOapg.properties.users: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["media", "places", "polls", "topics", "tweets", "users", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["media"]) -> typing.Union[MetaOapg.properties.media, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["places"]) -> typing.Union[MetaOapg.properties.places, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["polls"]) -> typing.Union[MetaOapg.properties.polls, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topics"]) -> typing.Union[MetaOapg.properties.topics, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tweets"]) -> typing.Union[MetaOapg.properties.tweets, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["users"]) -> typing.Union[MetaOapg.properties.users, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["media", "places", "polls", "topics", "tweets", "users", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        media: typing.Union[MetaOapg.properties.media, list, tuple, schemas.Unset] = schemas.unset,
        places: typing.Union[MetaOapg.properties.places, list, tuple, schemas.Unset] = schemas.unset,
        polls: typing.Union[MetaOapg.properties.polls, list, tuple, schemas.Unset] = schemas.unset,
        topics: typing.Union[MetaOapg.properties.topics, list, tuple, schemas.Unset] = schemas.unset,
        tweets: typing.Union[MetaOapg.properties.tweets, list, tuple, schemas.Unset] = schemas.unset,
        users: typing.Union[MetaOapg.properties.users, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Expansions':
        return super().__new__(
            cls,
            *args,
            media=media,
            places=places,
            polls=polls,
            topics=topics,
            tweets=tweets,
            users=users,
            _configuration=_configuration,
            **kwargs,
        )

from x_python_sdk.model.media import Media
from x_python_sdk.model.place import Place
from x_python_sdk.model.poll import Poll
from x_python_sdk.model.topic import Topic
from x_python_sdk.model.tweet import Tweet
from x_python_sdk.model.user import User
