# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints

    The version of the OpenAPI document: 2.62
    Created by: https://developer.twitter.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from x_python_sdk import schemas  # noqa: F401


class Poll(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Represent a Poll attached to a Tweet.
    """


    class MetaOapg:
        required = {
            "options",
            "id",
        }
        
        class properties:
        
            @staticmethod
            def id() -> typing.Type['PollId']:
                return PollId
            
            
            class options(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    max_items = 4
                    min_items = 2
                    
                    @staticmethod
                    def items() -> typing.Type['PollOption']:
                        return PollOption
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PollOption'], typing.List['PollOption']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'options':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PollOption':
                    return super().__getitem__(i)
            
            
            class duration_minutes(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 10080
                    inclusive_minimum = 5
            end_datetime = schemas.DateTimeSchema
            
            
            class voting_status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "open": "OPEN",
                        "closed": "CLOSED",
                    }
                
                @schemas.classproperty
                def OPEN(cls):
                    return cls("open")
                
                @schemas.classproperty
                def CLOSED(cls):
                    return cls("closed")
            __annotations__ = {
                "id": id,
                "options": options,
                "duration_minutes": duration_minutes,
                "end_datetime": end_datetime,
                "voting_status": voting_status,
            }
    
    options: MetaOapg.properties.options
    id: 'PollId'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'PollId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["options"]) -> MetaOapg.properties.options: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration_minutes"]) -> MetaOapg.properties.duration_minutes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_datetime"]) -> MetaOapg.properties.end_datetime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voting_status"]) -> MetaOapg.properties.voting_status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "options", "duration_minutes", "end_datetime", "voting_status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> 'PollId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["options"]) -> MetaOapg.properties.options: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration_minutes"]) -> typing.Union[MetaOapg.properties.duration_minutes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_datetime"]) -> typing.Union[MetaOapg.properties.end_datetime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voting_status"]) -> typing.Union[MetaOapg.properties.voting_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "options", "duration_minutes", "end_datetime", "voting_status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        options: typing.Union[MetaOapg.properties.options, list, tuple, ],
        id: 'PollId',
        duration_minutes: typing.Union[MetaOapg.properties.duration_minutes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        end_datetime: typing.Union[MetaOapg.properties.end_datetime, str, datetime, schemas.Unset] = schemas.unset,
        voting_status: typing.Union[MetaOapg.properties.voting_status, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Poll':
        return super().__new__(
            cls,
            *args,
            options=options,
            id=id,
            duration_minutes=duration_minutes,
            end_datetime=end_datetime,
            voting_status=voting_status,
            _configuration=_configuration,
            **kwargs,
        )

from x_python_sdk.model.poll_id import PollId
from x_python_sdk.model.poll_option import PollOption
