# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints

    The version of the OpenAPI document: 2.62
    Created by: https://developer.twitter.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from x_python_sdk import schemas  # noqa: F401


class UrlFields(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Represent the portion of text recognized as a URL.
    """


    class MetaOapg:
        required = {
            "url",
        }
        
        class properties:
            url = schemas.StrSchema
            title = schemas.StrSchema
            description = schemas.StrSchema
            display_url = schemas.StrSchema
            expanded_url = schemas.StrSchema
            
            
            class images(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['UrlImage']:
                        return UrlImage
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['UrlImage'], typing.List['UrlImage']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'images':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'UrlImage':
                    return super().__getitem__(i)
        
            @staticmethod
            def media_key() -> typing.Type['MediaKey']:
                return MediaKey
        
            @staticmethod
            def status() -> typing.Type['HttpStatusCode']:
                return HttpStatusCode
            unwound_url = schemas.StrSchema
            __annotations__ = {
                "url": url,
                "title": title,
                "description": description,
                "display_url": display_url,
                "expanded_url": expanded_url,
                "images": images,
                "media_key": media_key,
                "status": status,
                "unwound_url": unwound_url,
            }
    
    url: MetaOapg.properties.url
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["display_url"]) -> MetaOapg.properties.display_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expanded_url"]) -> MetaOapg.properties.expanded_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["images"]) -> MetaOapg.properties.images: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["media_key"]) -> 'MediaKey': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'HttpStatusCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unwound_url"]) -> MetaOapg.properties.unwound_url: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["url", "title", "description", "display_url", "expanded_url", "images", "media_key", "status", "unwound_url", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["display_url"]) -> typing.Union[MetaOapg.properties.display_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expanded_url"]) -> typing.Union[MetaOapg.properties.expanded_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["images"]) -> typing.Union[MetaOapg.properties.images, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["media_key"]) -> typing.Union['MediaKey', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['HttpStatusCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unwound_url"]) -> typing.Union[MetaOapg.properties.unwound_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["url", "title", "description", "display_url", "expanded_url", "images", "media_key", "status", "unwound_url", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        url: typing.Union[MetaOapg.properties.url, str, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        display_url: typing.Union[MetaOapg.properties.display_url, str, schemas.Unset] = schemas.unset,
        expanded_url: typing.Union[MetaOapg.properties.expanded_url, str, schemas.Unset] = schemas.unset,
        images: typing.Union[MetaOapg.properties.images, list, tuple, schemas.Unset] = schemas.unset,
        media_key: typing.Union['MediaKey', schemas.Unset] = schemas.unset,
        status: typing.Union['HttpStatusCode', schemas.Unset] = schemas.unset,
        unwound_url: typing.Union[MetaOapg.properties.unwound_url, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UrlFields':
        return super().__new__(
            cls,
            *args,
            url=url,
            title=title,
            description=description,
            display_url=display_url,
            expanded_url=expanded_url,
            images=images,
            media_key=media_key,
            status=status,
            unwound_url=unwound_url,
            _configuration=_configuration,
            **kwargs,
        )

from x_python_sdk.model.http_status_code import HttpStatusCode
from x_python_sdk.model.media_key import MediaKey
from x_python_sdk.model.url_image import UrlImage
