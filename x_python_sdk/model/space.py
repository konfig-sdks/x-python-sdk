# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints

    The version of the OpenAPI document: 2.62
    Created by: https://developer.twitter.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from x_python_sdk import schemas  # noqa: F401


class Space(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "id",
            "state",
        }
        
        class properties:
        
            @staticmethod
            def id() -> typing.Type['SpaceId']:
                return SpaceId
            
            
            class state(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "live": "LIVE",
                        "scheduled": "SCHEDULED",
                        "ended": "ENDED",
                    }
                
                @schemas.classproperty
                def LIVE(cls):
                    return cls("live")
                
                @schemas.classproperty
                def SCHEDULED(cls):
                    return cls("scheduled")
                
                @schemas.classproperty
                def ENDED(cls):
                    return cls("ended")
            title = schemas.StrSchema
            created_at = schemas.DateTimeSchema
        
            @staticmethod
            def creator_id() -> typing.Type['UserId']:
                return UserId
            ended_at = schemas.DateTimeSchema
            
            
            class host_ids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['UserId']:
                        return UserId
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['UserId'], typing.List['UserId']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'host_ids':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'UserId':
                    return super().__getitem__(i)
            
            
            class invited_user_ids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['UserId']:
                        return UserId
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['UserId'], typing.List['UserId']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'invited_user_ids':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'UserId':
                    return super().__getitem__(i)
            is_ticketed = schemas.BoolSchema
            lang = schemas.StrSchema
            participant_count = schemas.Int32Schema
            scheduled_start = schemas.DateTimeSchema
            
            
            class speaker_ids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['UserId']:
                        return UserId
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['UserId'], typing.List['UserId']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'speaker_ids':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'UserId':
                    return super().__getitem__(i)
            started_at = schemas.DateTimeSchema
            subscriber_count = schemas.Int32Schema
        
            @staticmethod
            def topics() -> typing.Type['SpaceTopics']:
                return SpaceTopics
            updated_at = schemas.DateTimeSchema
            __annotations__ = {
                "id": id,
                "state": state,
                "title": title,
                "created_at": created_at,
                "creator_id": creator_id,
                "ended_at": ended_at,
                "host_ids": host_ids,
                "invited_user_ids": invited_user_ids,
                "is_ticketed": is_ticketed,
                "lang": lang,
                "participant_count": participant_count,
                "scheduled_start": scheduled_start,
                "speaker_ids": speaker_ids,
                "started_at": started_at,
                "subscriber_count": subscriber_count,
                "topics": topics,
                "updated_at": updated_at,
            }
    
    id: 'SpaceId'
    state: MetaOapg.properties.state
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'SpaceId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creator_id"]) -> 'UserId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ended_at"]) -> MetaOapg.properties.ended_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["host_ids"]) -> MetaOapg.properties.host_ids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invited_user_ids"]) -> MetaOapg.properties.invited_user_ids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_ticketed"]) -> MetaOapg.properties.is_ticketed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lang"]) -> MetaOapg.properties.lang: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["participant_count"]) -> MetaOapg.properties.participant_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scheduled_start"]) -> MetaOapg.properties.scheduled_start: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["speaker_ids"]) -> MetaOapg.properties.speaker_ids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["started_at"]) -> MetaOapg.properties.started_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscriber_count"]) -> MetaOapg.properties.subscriber_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topics"]) -> 'SpaceTopics': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "state", "title", "created_at", "creator_id", "ended_at", "host_ids", "invited_user_ids", "is_ticketed", "lang", "participant_count", "scheduled_start", "speaker_ids", "started_at", "subscriber_count", "topics", "updated_at", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> 'SpaceId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creator_id"]) -> typing.Union['UserId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ended_at"]) -> typing.Union[MetaOapg.properties.ended_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["host_ids"]) -> typing.Union[MetaOapg.properties.host_ids, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invited_user_ids"]) -> typing.Union[MetaOapg.properties.invited_user_ids, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_ticketed"]) -> typing.Union[MetaOapg.properties.is_ticketed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lang"]) -> typing.Union[MetaOapg.properties.lang, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["participant_count"]) -> typing.Union[MetaOapg.properties.participant_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scheduled_start"]) -> typing.Union[MetaOapg.properties.scheduled_start, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["speaker_ids"]) -> typing.Union[MetaOapg.properties.speaker_ids, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["started_at"]) -> typing.Union[MetaOapg.properties.started_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscriber_count"]) -> typing.Union[MetaOapg.properties.subscriber_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topics"]) -> typing.Union['SpaceTopics', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "state", "title", "created_at", "creator_id", "ended_at", "host_ids", "invited_user_ids", "is_ticketed", "lang", "participant_count", "scheduled_start", "speaker_ids", "started_at", "subscriber_count", "topics", "updated_at", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: 'SpaceId',
        state: typing.Union[MetaOapg.properties.state, str, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
        creator_id: typing.Union['UserId', schemas.Unset] = schemas.unset,
        ended_at: typing.Union[MetaOapg.properties.ended_at, str, datetime, schemas.Unset] = schemas.unset,
        host_ids: typing.Union[MetaOapg.properties.host_ids, list, tuple, schemas.Unset] = schemas.unset,
        invited_user_ids: typing.Union[MetaOapg.properties.invited_user_ids, list, tuple, schemas.Unset] = schemas.unset,
        is_ticketed: typing.Union[MetaOapg.properties.is_ticketed, bool, schemas.Unset] = schemas.unset,
        lang: typing.Union[MetaOapg.properties.lang, str, schemas.Unset] = schemas.unset,
        participant_count: typing.Union[MetaOapg.properties.participant_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        scheduled_start: typing.Union[MetaOapg.properties.scheduled_start, str, datetime, schemas.Unset] = schemas.unset,
        speaker_ids: typing.Union[MetaOapg.properties.speaker_ids, list, tuple, schemas.Unset] = schemas.unset,
        started_at: typing.Union[MetaOapg.properties.started_at, str, datetime, schemas.Unset] = schemas.unset,
        subscriber_count: typing.Union[MetaOapg.properties.subscriber_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        topics: typing.Union['SpaceTopics', schemas.Unset] = schemas.unset,
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Space':
        return super().__new__(
            cls,
            *args,
            id=id,
            state=state,
            title=title,
            created_at=created_at,
            creator_id=creator_id,
            ended_at=ended_at,
            host_ids=host_ids,
            invited_user_ids=invited_user_ids,
            is_ticketed=is_ticketed,
            lang=lang,
            participant_count=participant_count,
            scheduled_start=scheduled_start,
            speaker_ids=speaker_ids,
            started_at=started_at,
            subscriber_count=subscriber_count,
            topics=topics,
            updated_at=updated_at,
            _configuration=_configuration,
            **kwargs,
        )

from x_python_sdk.model.space_id import SpaceId
from x_python_sdk.model.space_topics import SpaceTopics
from x_python_sdk.model.user_id import UserId
