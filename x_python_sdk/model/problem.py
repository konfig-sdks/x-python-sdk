# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints

    The version of the OpenAPI document: 2.62
    Created by: https://developer.twitter.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from x_python_sdk import schemas  # noqa: F401


class Problem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    An HTTP Problem Details object, as defined in IETF RFC 7807 (https://tools.ietf.org/html/rfc7807).
    """


    class MetaOapg:
        required = {
            "title",
            "type",
        }
        
        @staticmethod
        def discriminator():
            return {
                'type': {
                    'ClientForbiddenProblem': ClientForbiddenProblem,
                    'ConnectionExceptionProblem': ConnectionExceptionProblem,
                    'DisallowedResourceProblem': DisallowedResourceProblem,
                    'DuplicateRuleProblem': DuplicateRuleProblem,
                    'FieldUnauthorizedProblem': FieldUnauthorizedProblem,
                    'InvalidRequestProblem': InvalidRequestProblem,
                    'OperationalDisconnectProblem': OperationalDisconnectProblem,
                    'ResourceNotFoundProblem': ResourceNotFoundProblem,
                    'ResourceUnauthorizedProblem': ResourceUnauthorizedProblem,
                    'ResourceUnavailableProblem': ResourceUnavailableProblem,
                    'UsageCapExceededProblem': UsageCapExceededProblem,
                    'about:blank': GenericProblem,
                    'https://api.twitter.com/2/problems/client-disconnected': ClientDisconnectedProblem,
                    'https://api.twitter.com/2/problems/client-forbidden': ClientForbiddenProblem,
                    'https://api.twitter.com/2/problems/conflict': ConflictProblem,
                    'https://api.twitter.com/2/problems/disallowed-resource': DisallowedResourceProblem,
                    'https://api.twitter.com/2/problems/duplicate-rules': DuplicateRuleProblem,
                    'https://api.twitter.com/2/problems/invalid-request': InvalidRequestProblem,
                    'https://api.twitter.com/2/problems/invalid-rules': InvalidRuleProblem,
                    'https://api.twitter.com/2/problems/noncompliant-rules': NonCompliantRulesProblem,
                    'https://api.twitter.com/2/problems/not-authorized-for-field': FieldUnauthorizedProblem,
                    'https://api.twitter.com/2/problems/not-authorized-for-resource': ResourceUnauthorizedProblem,
                    'https://api.twitter.com/2/problems/oauth1-permissions': Oauth1PermissionsProblem,
                    'https://api.twitter.com/2/problems/operational-disconnect': OperationalDisconnectProblem,
                    'https://api.twitter.com/2/problems/resource-not-found': ResourceNotFoundProblem,
                    'https://api.twitter.com/2/problems/resource-unavailable': ResourceUnavailableProblem,
                    'https://api.twitter.com/2/problems/rule-cap': RulesCapProblem,
                    'https://api.twitter.com/2/problems/streaming-connection': ConnectionExceptionProblem,
                    'https://api.twitter.com/2/problems/unsupported-authentication': UnsupportedAuthenticationProblem,
                    'https://api.twitter.com/2/problems/usage-capped': UsageCapExceededProblem,
                }
            }
        
        class properties:
            title = schemas.StrSchema
            type = schemas.StrSchema
            detail = schemas.StrSchema
            status = schemas.IntSchema
            __annotations__ = {
                "title": title,
                "type": type,
                "detail": detail,
                "status": status,
            }
    
    title: MetaOapg.properties.title
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detail"]) -> MetaOapg.properties.detail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "type", "detail", "status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detail"]) -> typing.Union[MetaOapg.properties.detail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "type", "detail", "status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        detail: typing.Union[MetaOapg.properties.detail, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Problem':
        return super().__new__(
            cls,
            *args,
            title=title,
            type=type,
            detail=detail,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from x_python_sdk.model.client_disconnected_problem import ClientDisconnectedProblem
from x_python_sdk.model.client_forbidden_problem import ClientForbiddenProblem
from x_python_sdk.model.conflict_problem import ConflictProblem
from x_python_sdk.model.connection_exception_problem import ConnectionExceptionProblem
from x_python_sdk.model.disallowed_resource_problem import DisallowedResourceProblem
from x_python_sdk.model.duplicate_rule_problem import DuplicateRuleProblem
from x_python_sdk.model.field_unauthorized_problem import FieldUnauthorizedProblem
from x_python_sdk.model.generic_problem import GenericProblem
from x_python_sdk.model.invalid_request_problem import InvalidRequestProblem
from x_python_sdk.model.invalid_rule_problem import InvalidRuleProblem
from x_python_sdk.model.non_compliant_rules_problem import NonCompliantRulesProblem
from x_python_sdk.model.oauth1_permissions_problem import Oauth1PermissionsProblem
from x_python_sdk.model.operational_disconnect_problem import OperationalDisconnectProblem
from x_python_sdk.model.resource_not_found_problem import ResourceNotFoundProblem
from x_python_sdk.model.resource_unauthorized_problem import ResourceUnauthorizedProblem
from x_python_sdk.model.resource_unavailable_problem import ResourceUnavailableProblem
from x_python_sdk.model.rules_cap_problem import RulesCapProblem
from x_python_sdk.model.unsupported_authentication_problem import UnsupportedAuthenticationProblem
from x_python_sdk.model.usage_cap_exceeded_problem import UsageCapExceededProblem
