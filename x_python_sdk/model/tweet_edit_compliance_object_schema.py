# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints

    The version of the OpenAPI document: 2.62
    Created by: https://developer.twitter.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from x_python_sdk import schemas  # noqa: F401


class TweetEditComplianceObjectSchema(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "initial_tweet_id",
            "event_at",
            "tweet",
            "edit_tweet_ids",
        }
        
        class properties:
            
            
            class edit_tweet_ids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['TweetId']:
                        return TweetId
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['TweetId'], typing.List['TweetId']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'edit_tweet_ids':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TweetId':
                    return super().__getitem__(i)
            event_at = schemas.DateTimeSchema
        
            @staticmethod
            def initial_tweet_id() -> typing.Type['TweetId']:
                return TweetId
        
            @staticmethod
            def tweet() -> typing.Type['TweetEditComplianceObjectSchemaTweet']:
                return TweetEditComplianceObjectSchemaTweet
            __annotations__ = {
                "edit_tweet_ids": edit_tweet_ids,
                "event_at": event_at,
                "initial_tweet_id": initial_tweet_id,
                "tweet": tweet,
            }
    
    initial_tweet_id: 'TweetId'
    event_at: MetaOapg.properties.event_at
    tweet: 'TweetEditComplianceObjectSchemaTweet'
    edit_tweet_ids: MetaOapg.properties.edit_tweet_ids
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["edit_tweet_ids"]) -> MetaOapg.properties.edit_tweet_ids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event_at"]) -> MetaOapg.properties.event_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["initial_tweet_id"]) -> 'TweetId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tweet"]) -> 'TweetEditComplianceObjectSchemaTweet': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["edit_tweet_ids", "event_at", "initial_tweet_id", "tweet", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["edit_tweet_ids"]) -> MetaOapg.properties.edit_tweet_ids: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event_at"]) -> MetaOapg.properties.event_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["initial_tweet_id"]) -> 'TweetId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tweet"]) -> 'TweetEditComplianceObjectSchemaTweet': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["edit_tweet_ids", "event_at", "initial_tweet_id", "tweet", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        initial_tweet_id: 'TweetId',
        event_at: typing.Union[MetaOapg.properties.event_at, str, datetime, ],
        tweet: 'TweetEditComplianceObjectSchemaTweet',
        edit_tweet_ids: typing.Union[MetaOapg.properties.edit_tweet_ids, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TweetEditComplianceObjectSchema':
        return super().__new__(
            cls,
            *args,
            initial_tweet_id=initial_tweet_id,
            event_at=event_at,
            tweet=tweet,
            edit_tweet_ids=edit_tweet_ids,
            _configuration=_configuration,
            **kwargs,
        )

from x_python_sdk.model.tweet_edit_compliance_object_schema_tweet import TweetEditComplianceObjectSchemaTweet
from x_python_sdk.model.tweet_id import TweetId
