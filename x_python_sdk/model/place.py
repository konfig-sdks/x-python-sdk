# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints

    The version of the OpenAPI document: 2.62
    Created by: https://developer.twitter.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from x_python_sdk import schemas  # noqa: F401


class Place(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "full_name",
            "id",
        }
        
        class properties:
            full_name = schemas.StrSchema
            id = schemas.StrSchema
            
            
            class contained_within(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    min_items = 1
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'contained_within':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            country = schemas.StrSchema
        
            @staticmethod
            def country_code() -> typing.Type['CountryCode']:
                return CountryCode
        
            @staticmethod
            def geo() -> typing.Type['Geo']:
                return Geo
            name = schemas.StrSchema
        
            @staticmethod
            def place_type() -> typing.Type['PlaceType']:
                return PlaceType
            __annotations__ = {
                "full_name": full_name,
                "id": id,
                "contained_within": contained_within,
                "country": country,
                "country_code": country_code,
                "geo": geo,
                "name": name,
                "place_type": place_type,
            }
    
    full_name: MetaOapg.properties.full_name
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["full_name"]) -> MetaOapg.properties.full_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contained_within"]) -> MetaOapg.properties.contained_within: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country_code"]) -> 'CountryCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["geo"]) -> 'Geo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["place_type"]) -> 'PlaceType': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["full_name", "id", "contained_within", "country", "country_code", "geo", "name", "place_type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["full_name"]) -> MetaOapg.properties.full_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contained_within"]) -> typing.Union[MetaOapg.properties.contained_within, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country_code"]) -> typing.Union['CountryCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["geo"]) -> typing.Union['Geo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["place_type"]) -> typing.Union['PlaceType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["full_name", "id", "contained_within", "country", "country_code", "geo", "name", "place_type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        full_name: typing.Union[MetaOapg.properties.full_name, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        contained_within: typing.Union[MetaOapg.properties.contained_within, list, tuple, schemas.Unset] = schemas.unset,
        country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
        country_code: typing.Union['CountryCode', schemas.Unset] = schemas.unset,
        geo: typing.Union['Geo', schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        place_type: typing.Union['PlaceType', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Place':
        return super().__new__(
            cls,
            *args,
            full_name=full_name,
            id=id,
            contained_within=contained_within,
            country=country,
            country_code=country_code,
            geo=geo,
            name=name,
            place_type=place_type,
            _configuration=_configuration,
            **kwargs,
        )

from x_python_sdk.model.country_code import CountryCode
from x_python_sdk.model.geo import Geo
from x_python_sdk.model.place_type import PlaceType
