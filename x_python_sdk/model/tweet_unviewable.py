# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints

    The version of the OpenAPI document: 2.62
    Created by: https://developer.twitter.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from x_python_sdk import schemas  # noqa: F401


class TweetUnviewable(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "application",
            "event_at",
            "tweet",
        }
        
        class properties:
            application = schemas.StrSchema
            event_at = schemas.DateTimeSchema
        
            @staticmethod
            def tweet() -> typing.Type['TweetUnviewableTweet']:
                return TweetUnviewableTweet
            __annotations__ = {
                "application": application,
                "event_at": event_at,
                "tweet": tweet,
            }
    
    application: MetaOapg.properties.application
    event_at: MetaOapg.properties.event_at
    tweet: 'TweetUnviewableTweet'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["application"]) -> MetaOapg.properties.application: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event_at"]) -> MetaOapg.properties.event_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tweet"]) -> 'TweetUnviewableTweet': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["application", "event_at", "tweet", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["application"]) -> MetaOapg.properties.application: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event_at"]) -> MetaOapg.properties.event_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tweet"]) -> 'TweetUnviewableTweet': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["application", "event_at", "tweet", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        application: typing.Union[MetaOapg.properties.application, str, ],
        event_at: typing.Union[MetaOapg.properties.event_at, str, datetime, ],
        tweet: 'TweetUnviewableTweet',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TweetUnviewable':
        return super().__new__(
            cls,
            *args,
            application=application,
            event_at=event_at,
            tweet=tweet,
            _configuration=_configuration,
            **kwargs,
        )

from x_python_sdk.model.tweet_unviewable_tweet import TweetUnviewableTweet
